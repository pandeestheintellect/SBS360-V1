@model Eng360Web.Models.ViewModel.PaymentPayableViewModel
@{
    Layout = null;
}

<script src="~/Scripts/moment.js"></script>
<script src="~/Scripts/bootstrap-datetimepicker.js"></script>
<link href="~/Content/bootstrap-datetimepicker.css" rel="stylesheet" />


<style>

    .table-condensed tbody > tr > td > a {
        color: #4eb1ba !important;
    }
    .required::after {
        content: "*";
        font-weight: bold;
        color: red;
    }
    input[type='checkbox'] {
        width: 20px;
        height: 20px;
    }
</style>


<div class="row inner-page--container">
    <div class="col-lg-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                <b> Add Payable Voucher  </b>
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
            </div>
            <!-- /.panel-heading -->
            <div class="panel-body">

                <div class="modal-body">
                    @using (Html.BeginForm("Create", "PaymentPayable", FormMethod.Post, new { role = "form", id = "payableForm" }))
                    {
                        @Html.AntiForgeryToken()


                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        
                        @Html.HiddenFor(model => model.PoID)
                        @Html.HiddenFor(model => model.ClaimID)

                        <div class="row">

                            <div class="col-md-12">
                                @Html.LabelFor(model => model.PayableType, "Payable Type", htmlAttributes: new { @class = "control-label required" })
                                <div>
                                    @Html.DropDownListFor(model => model.PayableType, new SelectList(
                                    new List<Object>{
                                    new { value = 0 , text = "Select"  },
                                    new { value = 1 , text = "Purchase Order" },
                                    new { value = 2 , text = "Expense Settlement" },
                                    new { value = 3 , text = "Petty Cash" },
                                    new { value = 4 , text = "Others" }

                    }, "value", "text", 0), htmlAttributes: new { @class = "form-control", @onchange = "ShowHideSuppliers(this.value)" })
                                    @Html.ValidationMessageFor(model => model.PayableType, "", new { @class = "text-danger" })
                                </div>
                            </div>




                            @*<div id="show-auto-approval" class="col-md-12">
                                @Html.LabelFor(model => model.ExpenseFlag, "Internal(Expense)")
                                <div>
                                    @Html.CheckBoxFor(model => model.ExpenseFlag, htmlAttributes: new { @class = "form-control", onclick = "ShowHideSupplier(this)" })

                                </div>
                            </div>*@


                            <div id="show-supplier" style="display: none" class="col-md-6">
                                @Html.LabelFor(model => model.SupplierID, "Supplier Name", htmlAttributes: new { @class = "control-label" })
                                <div>
                                    @Html.DropDownList("SupplierID", null, htmlAttributes: new { @class = "form-control", @onchange= "supplierOnChange(this)" })
                                    @Html.ValidationMessageFor(model => model.SupplierID, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div id="show-PO" style="display: none" class="col-md-6">
                                @Html.LabelFor(model => model.NPoID, "PO Ref", htmlAttributes: new { @class = "control-label" })
                                <div class="divNPoID">
                                    @Html.DropDownList("NPoID", null, htmlAttributes: new { @class = "form-control", @onchange="DispPOAmount(this)" })
                                    @Html.ValidationMessageFor(model => model.NPoID, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div id="show-dummyemp" style="display: none" class="col-md-6">
                                @Html.LabelFor(model => model.DummyEmp, "Employee Name", htmlAttributes: new { @class = "control-label" })
                                <div>
                                    @Html.DropDownList("DummyEmp", null, htmlAttributes: new { @class = "form-control", @onchange= "dummyempOnChange(this)" })
                                    @Html.ValidationMessageFor(model => model.DummyEmp, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div id="show-claimid" style="display: none" class="col-md-6">
                                @Html.LabelFor(model => model.ClaimNo, "Expense Ref", htmlAttributes: new { @class = "control-label" })
                                <div class="divClaimID">
                                    @Html.DropDownList("ClaimNo", null, htmlAttributes: new { @class = "form-control", @onchange= "DispClaimAmount(this)" })
                                    @Html.ValidationMessageFor(model => model.ClaimNo, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div id="show-employee" style="display: none" class="col-md-6">
                                @Html.LabelFor(model => model.EmpID, "Employee Name", htmlAttributes: new { @class = "control-label" })
                                <div>
                                    @Html.DropDownList("EmpID", null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.EmpID, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div id="show-genref" style="display: none" class="col-md-6">
                                @Html.LabelFor(model => model.PoNo, "Other Ref", htmlAttributes: new { @class = "control-label required" })
                                <div>
                                    @Html.EditorFor(model => model.PoNo, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.PoNo, "", new { @class = "text-danger" })
                                </div>
                            </div>



                            <div class="col-md-6">
                                @Html.LabelFor(model => model.Tr_date, htmlAttributes: new { @class = "control-label required" })
                                <div>
                                    @Html.EditorFor(model => model.Tr_date, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Tr_date, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div id="show-duedate" class="col-md-6">
                                @Html.LabelFor(model => model.Due_date, htmlAttributes: new { @class = "control-label" })
                                <div>
                                    @Html.EditorFor(model => model.Due_date, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Due_date, "", new { @class = "text-danger" })
                                </div>
                            </div>



                           

                            <div class="col-md-6">
                                @Html.LabelFor(model => model.Tr_status, "Transaction Status", htmlAttributes: new { @class = "control-label required" })
                                <div>
                                    @Html.DropDownList("Tr_status", null, htmlAttributes: new { @class = "form-control" })

                                    @Html.ValidationMessageFor(model => model.Tr_status, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="col-md-6">
                                @Html.LabelFor(model => model.reference, htmlAttributes: new { @class = "control-label" })
                                <div>
                                    @Html.EditorFor(model => model.reference, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.reference, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            <div class="col-md-6">
                                @Html.LabelFor(model => model.FY, "Financial Year", htmlAttributes: new { @class = "control-label required" })
                                <div>
                                    @Html.DropDownListFor(model => model.FY, new SelectList(
                                    new List<Object>{
                                    new { value = 2020 , text = "2020" },
                                    new { value = 2020 , text = "2021" },
                                    new { value = 2020 , text = "2022" },
                                    new { value = 2020 , text = "2023" },
                                    new { value = 2020 , text = "2024" },
                                    new { value = 2020 , text = "2025" }

                    }, "value", "text", 2), htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.FY, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="col-md-6">
                                @Html.LabelFor(model => model.Particulars, htmlAttributes: new { @class = "control-label" })
                                <div>
                                    @Html.EditorFor(model => model.Particulars, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Particulars, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div id="show-amt" style="display: none" class="col-md-6">

                                @Html.Label("Total Amount")
                                <div>
                                    
                                   @Html.EditorFor(model => model.TotAmt, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                </div>
                            </div>

                            <div id="show-paid" style="display: none" class="col-md-6">

                                @Html.Label("Already Paid")
                                <div>
                                    
                                    @Html.EditorFor(model => model.AlreadyPaid, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                </div>
                            </div>

                            <div class="col-md-6">
                                @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label required" })
                                <div>
                                    @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="col-md-6">
                                @Html.LabelFor(model => model.GTAX, "GST", htmlAttributes: new { @class = "control-label" })
                                <div>
                                    @Html.DropDownListFor(model => model.GTAX, new SelectList(
                                    new List<Object>{
                                    new { value = 0 , text = "Yes"  },
                                    new { value = 1 , text = "No" }

                    }, "value", "text", 2), htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.GTAX, "", new { @class = "text-danger" })
                                </div>
                            </div>

                        </div>


                        <div class="modal-footer">
                            <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>

                            <button type="button" id="create-payable-dialog-save" class="btn btn-primary">Create</button>

                        </div>

                    }
                </div>
            </div>
        </div>
    </div>
</div>

<script>



    $("form").removeData("validator");
    $("form").removeData("unobtrusiveValidation");
    $.validator.unobtrusive.parse("form");

    //function ShowHideSupplier(ExpenseFlag) {
    //    debugger;
    //    var dvSuppDropdown = document.getElementById("show-supplier");
    //    var dvDuedate = document.getElementById("show-duedate");
    //    var dvEmployee = document.getElementById("show-employee");

    //    //dvSuppDropdown.style.display = 'none';
    //    //dvDuedate.style.display = 'none';

    //    dvSuppDropdown.style.display = ExpenseFlag.checked ? "none" : "block";
    //    dvDuedate.style.display = ExpenseFlag.checked ? "none" : "block";
    //    dvEmployee.style.display = ExpenseFlag.checked ? "block" : "none";

    //}

    function ShowHideSuppliers(val) {
        debugger;
        var dvSup = document.getElementById("show-supplier");
        var dvPo = document.getElementById("show-PO");

        var dvdEmp = document.getElementById("show-dummyemp");
        var dvClaim = document.getElementById("show-claimid");

        var dvEmp = document.getElementById("show-employee");
        var dvgenref = document.getElementById("show-genref");

        var dvAmt = document.getElementById("show-amt");
        var dvPaid = document.getElementById("show-paid");



        if (val == 0) {
            dvSup.style.display = "none";
            dvPo.style.display = "none";
            dvdEmp.style.display = "none";
            dvClaim.style.display = "none";
            dvEmp.style.display = "none";
            dvgenref.style.display = "none";

            dvAmt.style.display = "none";
            dvPaid.style.display = "none";


            $('#TotAmt').val(0);
            $("#AlreadyPaid").val(0);
            $('#Amount').val(0);
        }
        if (val == 1) {
            dvSup.style.display = "block";
            dvPo.style.display = "block";
            dvdEmp.style.display = "none";
            dvClaim.style.display = "none";
            dvEmp.style.display = "none";
            dvgenref.style.display = "none";
            dvAmt.style.display = "block";
            dvPaid.style.display = "block";
            $('#DummyEmp').val(0);
            $('#ClaimNo').val(0);
            $('#EmpID').val(0);
            $('#DummyEmp').val(0);
            $('#TotAmt').val(0);
            $("#AlreadyPaid").val(0);
            $('#Amount').val(0);
        }
        if (val == 2) {
            dvSup.style.display = "none";
            dvPo.style.display = "none";
            dvdEmp.style.display = "block";
            dvClaim.style.display = "block";
            dvEmp.style.display = "none";
            dvgenref.style.display = "none";
            dvAmt.style.display = "block";
            dvPaid.style.display = "none";
            $('#SupplierID').val(0);
            $('#NPoID').val(0);
            $('#EmpID').val(0);
            $('#TotAmt').val(0);
            $("#AlreadyPaid").val(0);
        }
        if (val == 3) {
            dvSup.style.display = "none";
            dvPo.style.display = "none";
            dvdEmp.style.display = "none";
            dvClaim.style.display = "none";
            dvEmp.style.display = "block";
            dvgenref.style.display = "block";
            dvAmt.style.display = "none";
            dvPaid.style.display = "none";
            $('#SupplierID').val(0);
            $('#ClaimNo').val(0);
            $('#NPoID').val(0);
            $('#DummyEmp').val(0);
            $('#TotAmt').val(0);
            $("#AlreadyPaid").val(0);
            $('#Amount').val(0);
            $('#EmpID').val(0);
            
        }
        if (val == 4) {
            dvSup.style.display = "none";
            dvPo.style.display = "none";
            dvdEmp.style.display = "none";
            dvClaim.style.display = "none";
            dvEmp.style.display = "none";
            dvgenref.style.display = "block";
            dvAmt.style.display = "none";
            dvPaid.style.display = "none";
            $('#SupplierID').val(0);
            $('#ClaimNo').val(0);
            $('#NPoID').val(0);
            $('#EmpID').val(0);
            $('#DummyEmp').val(0);
            $('#TotAmt').val(0);
            $("#AlreadyPaid").val(0);
            $('#Amount').val(0);

        }

    }

    function DispPOAmount(val) {
        debugger;
        var pid = $('#NPoID option:selected').val();
        var apid = pid.split('_');
        var actpoid = parseInt(apid[1]);
        var apaid = 0;

        var amt = 0;
        var poid = $('#NPoID option:selected').text();

        var puid = poid.split('_');
        var quoteid = puid[1].replace("(", "");
        quoteid = quoteid.replace(")", "");
       // alert(actpoid);
        $.post("PaymentPayable/GetAlreadyPaid?poid=" + actpoid , {@Html.AntiForgeryTokenForAjaxPost() }, function (datanew) {

            $("#AlreadyPaid").val(datanew.sumpaid);

            amt = parseFloat(quoteid) - parseFloat($("#AlreadyPaid").val());

            $('#TotAmt').val(quoteid);
            $('#Amount').val(amt.toFixed(2));
            
        });
        
    }

    function DispClaimAmount(val) {
      
        var poid = $('#ClaimNo option:selected').text();

        var puid = poid.split('_');
        var quoteid = puid[1].replace("(", "");
        quoteid = quoteid.replace(")", "");
        
        $('#TotAmt').val(quoteid);
        $("#AlreadyPaid").val(0);
        $('#Amount').val(quoteid);
    }

  
    $(function () {
        $('#SupplierID').prepend('<option value="0" selected="selected">Select</option>');

        $('#NPoID').prepend('<option value="0" selected="selected">Select</option>');

        $('#DummyEmp').prepend('<option value="0" selected="selected">Select</option>');

        $('#ClaimNo').prepend('<option value="0" selected="selected">Select</option>');

        $('#EmpID').prepend('<option value="0" selected="selected">Select</option>');
       
        $('#Tr_date').datetimepicker({ format: 'DD/MM/YYYY' });
        $('#Due_date').datetimepicker({ format: 'DD/MM/YYYY' });


    });

    function supplierOnChange(obj) {

        $.each($(".divNPoID option:selected"), function () {

            // this is it
            $(this).prop('selected', false);

        });
        debugger;
        $('.divNPoID option').css('display', 'none')

        $('.divNPoID option[value^="' + obj.value + '"]').css('display', 'block')

        $.each($('.divNPoID option[value^="' + obj.value + '"]'), function () {

            // this is it
            $(this).prop('selected', true);
            DispPOAmount();
            return;
        });
    }


    function dummyempOnChange(obj) {

        $.each($(".divClaimID option:selected"), function () {

            // this is it
            $(this).prop('selected', false);
            
        });
        debugger;
        $('.divClaimID option').css('display', 'none')

        $('.divClaimID option[value^="' + obj.value + '"]').css('display', 'block')

        $.each($('.divClaimID option[value^="' + obj.value + '"]'), function () {

            // this is it
            $(this).prop('selected', true);
            DispClaimAmount();
            return;
        });
    }


    
    

</script>