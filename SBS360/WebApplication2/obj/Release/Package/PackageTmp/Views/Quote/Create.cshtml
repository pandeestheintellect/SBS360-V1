@model Eng360Web.Models.ViewModel.QuoteViewModel

@{
    Layout = null;
    //  ViewBag.TermsAndCond = "TERMS & CONDITIONS : \n PRICE: All in Singapore dollars \n VALIDITY: Two Month from dated this quotation \n DELIVERY    : One week from upon order confirmation \n PAYMENT: 30 days from the date of invoice \n NOTE: Any others work NOT mentioned here will be additional charged.";

}

<script src="~/Scripts/moment.js"></script>
<script src="~/Scripts/bootstrap-datetimepicker.js"></script>
<link href="~/Content/bootstrap-datetimepicker.css" rel="stylesheet" />

<style>
    .table-condensed tbody > tr > td > a {
        color: #4eb1ba !important;
    }

    input[type='checkbox'] {
        width: 20px;
        height: 20px;
    }

    .required::after {
        content: "*";
        font-weight: bold;
        color: red;
    }
</style>



<div class="row inner-page--container">
    <div class="col-lg-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                <b> Add New Quotation  </b>

                @*<button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>*@
            </div>
            <!-- /.panel-heading -->
            <div class="panel-body">


                @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "quotationForm" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(model => model.FinalAmount)

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.Attention_CCID)
                    <div class="row">

                        <div class="col-md-6">
                            @Html.LabelFor(model => model.QuoteDate, htmlAttributes: new { @class = "control-label required" }) @Html.ValidationMessageFor(model => model.QuoteDate, "", new { @class = "text-danger" })
                            <div>
                                @Html.EditorFor(model => model.QuoteDate, new { htmlAttributes = new { @class = "form-control" } })

                            </div>
                        </div>


                        <div class="col-md-6">
                            @Html.LabelFor(model => model.ValidTill, "Valid Till", htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.DropDownListFor(model => model.ValidTill, new SelectList(
                                    new List<Object>{
                                    new { value = "COD" , text = "COD"  },
                                    new { value = "3 Days" , text = "3 Days"  },
                                    new { value = "7 Days" , text = "7 Days"  },
                                    new { value = "15 Days" , text = "15 Days"  },
                                    new { value = "30 Days" , text = "30 Days" },
                                    new { value = "45 Days" , text = "45 Days" },
                                    new { value = "60 Days" , text = "60 Days" }
                                    

                                    }, "value", "text", 2), htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ValidTill, "", new { @class = "text-danger" })
                            </div>
                        </div>





                        <div class="col-md-6">
                            @Html.LabelFor(model => model.ClientID, htmlAttributes: new { @class = "control-label required" }) @Html.ValidationMessageFor(model => model.ClientID, "", new { @class = "text-danger" })
                            <div>
                                @Html.DropDownList("ClientID", null, htmlAttributes: new { @class = "form-control", @onchange = "onclientChange(this)" })

                            </div>
                        </div>

                        <div class="col-md-6">
                            @Html.LabelFor(model => model.Attention_CCID, htmlAttributes: new { @class = "control-label" }) @Html.ValidationMessageFor(model => model.Attention_CCID, "", new { @class = "text-danger" })
                            <div>

                                <select id="Attention_CCID" name="Attention_CCID" class="form-control" onchange="setAttentionID(this)">
                                    @foreach (var att in Model.attention)
                                    {

                                        if (Model.attention.First().CCID == att.CCID)
                                        {
                                            <option id="@att.CCID" class="@att.eng_client_master.ClientID" value="@att.CCID">@att.SPOCName</option>
                                        }
                                        else
                                        {
                                            <option style="display:none" id="@att.CCID" class="@att.eng_client_master.ClientID" value="@att.CCID">@att.SPOCName</option>
                                        }

                                    }
                                </select>

                            </div>
                        </div>


                        <div class="col-md-6">
                            @Html.LabelFor(model => model.YourRef, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.EditorFor(model => model.YourRef, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.YourRef, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div class="col-md-6">
                            @Html.LabelFor(model => model.QuoteStatusID, "Status", htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.DropDownList("QuoteStatusID", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.QuoteStatusID, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-6">
                            @Html.LabelFor(model => model.GTAX, "GST", htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.DropDownListFor(model => model.GTAX, new SelectList(
                                    new List<Object>{
                                    new { value = 0 , text = "Yes"  },
                                    new { value = 1 , text = "No" }

                    }, "value", "text", 2), htmlAttributes: new { @class = "form-control", onchange = "OnDiscountEntry(this)" })
                                @Html.ValidationMessageFor(model => model.GTAX, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div class="col-md-6">
                            @Html.LabelFor(model => model.QuoteCategory, "Category", htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.DropDownListFor(model => model.QuoteCategory, new SelectList(
                                    new List<Object>{
                                    new { value = "N" , text = "Normal"  }
                                    

                    }, "value", "text", 2), htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.QuoteCategory, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        @*<div class="col-md-6">
                            @Html.LabelFor(model => model.PaymentTerms, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.EditorFor(model => model.PaymentTerms, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PaymentTerms, "", new { @class = "text-danger" })
                            </div>
                        </div>*@

                        <div class="col-md-6">
                            @Html.LabelFor(model => model.PaymentTerms, "Payment Terms", htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.DropDownListFor(model => model.PaymentTerms, new SelectList(
                                    new List<Object>{
                                    new { value = "COD" , text = "COD"  },
                                    new { value = "3 Days" , text = "3 Days"  },
                                    new { value = "7 Days" , text = "7 Days"  },
                                    new { value = "15 Days" , text = "15 Days"  },
                                    new { value = "30 Days" , text = "30 Days" },
                                    new { value = "45 Days" , text = "45 Days" },
                                    new { value = "60 Days" , text = "60 Days" }
                                                                                                        

                                    }, "value", "text", 2), htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.PaymentTerms, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-6">
                            @Html.LabelFor(model => model.ProjectTitle, "Project Title", htmlAttributes: new { @class = "control-label required" })
                            <div>
                                @Html.TextAreaFor(model => model.ProjectTitle, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ProjectTitle, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-6">
                            @Html.LabelFor(model => model.QuoteTitle, "Subject Remarks", htmlAttributes: new { @class = "control-label required" })
                            <div>
                                @Html.TextAreaFor(model => model.QuoteTitle, 7,40, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.QuoteTitle, "", new { @class = "text-danger" })
                            </div>
                        </div>
                  

                        <div class="col-md-6">
                            @Html.LabelFor(model => model.TermsAndCond, "Terms & Conditions", htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.TextAreaFor(model => model.TermsAndCond, 7, 40, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.TermsAndCond, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div class="col-md-6">
                            @Html.LabelFor(model => model.Discount, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { onchange = "OnDiscountEntry(this)", @class = "form-control", @Value="0.00" } })
                                @Html.ValidationMessageFor(model => model.Discount, "", new { @class = "text-danger" })
                            </div>
                        </div>


                            <div class="col-md-6">
                                
                                @Html.Label("Quote Amount")
                                <div>
                                    @Html.TextBox("QuoteValue", Model.QuoteAmount, new { @class = "form-control", @Value = "0", style = "width: 200px", @readonly = "readonly" })
                                </div>
                            </div>
                        </div>
                    <div class="col-md-12" style="min-height:300px !important;padding-top:25px;padding-left:0px;padding-right:0px;">

                        <table class="table table-striped table-bordered" id="tableQuoteDescriptions">

                            <thead>
                                <tr>
                                    <th>Quote Desc</th>
                                    <th>Quantity</th>
                                    <th>UoM</th>
                                    <th>Quote Price</th>
                                   
                                    <th>Actions</th>

                                </tr>
                            </thead>
                            <tbody>
                                <tr class="remove">
                                    <td>
                                        sdsd
                                    </td>
                                    <td>
                                        sds
                                    </td>
                                    <td>
                                        sdas
                                    </td>
                                    <td>sds</td>
                                    
                                    <td>kdsd</td>
                                </tr>

                            </tbody>

                        </table>

                    </div>



                }

            </div>
            <div class="modal-footer">
                
                @Html.HiddenFor(model => model.isAutoApproved)
                @Html.HiddenFor(model => model.isProjectCreated)

                <input type="button" value="Create" id="create-quote-dialog-save" style="float:right" class="btn btn-primary" /><span style="float:right">&nbsp;</span><input type="button" value="Back" id="create-quote-back" style="float:right" class="btn btn-primary Quotation" />
            </div>
        </div>
    </div>
</div>

<script>


    $(function () {
       // $("#TermsAndCond").html("TERMS & CONDITIONS : \n PRICE: All in Singapore dollars \n VALIDITY: Two Month from dated this quotation \n DELIVERY    : One week from upon order confirmation \n NOTE: Any others work NOT mentioned here will be additional charged.");

        $('#QuoteDate').datetimepicker({ format: 'DD/MM/YYYY', maxDate: new Date() });

        //$('#ValidTill').datetimepicker({
        //    format: 'MM/DD/YYYY',
        //    useCurrent: false //Important! See issue #1075
        //});
        //$("#QuoteDate").on("dp.change", function (e) {
        //    $('#ValidTill').data("DateTimePicker").minDate(e.date);
        //});

        //$("#ValidTill").on("dp.change", function (e) {
        //    $('#QuoteDate').data("DateTimePicker").maxDate(e.date);
        //});
    });

 


    var contacts = [];

                    var quotedescTable;
                    $(document).ready(function () {

                        quotedescTable = $('#tableQuoteDescriptions').DataTable({
                            "autoWidth": true,
                            "order": [],
                            //dom: 'Brti',
                            dom: 'Bfrtipl',
                            buttons: [
                                'copyHtml5',
                                'excelHtml5',
                                'csvHtml5',
                                'pdfHtml5',

                            ],
                            "columnDefs": [
                        {
                            // The `data` parameter refers to the data for the cell (defined by the
                            // `data` option, which defaults to the column being worked with, in
                            // this case `data: 0`.
                            "render": function (data, type, row) {
                               // return '<a class="btn" onclick="removeDataFromDT(this)"> <img src="Content/images/delete.png" /> </a>';
                                return '<a class="btn" onclick="removeDataFromDT(this)" title="Delete QuoteDescription" style="padding: 0px 0px;"> <i class="fa fa-trash" aria-hidden="true" style="color:orangered;font-size:20px"></i> </a>';
                            },
                            "targets": 4
                        }]
                        });
                    });

                    $('.dt-buttons').prepend('<a style="margin-bottom:10px; background: #6f9dcd !important; border-radius: 50px !important;"  onclick="CreateQuoteDesc()" class="dt-button  buttons-html5" tabindex="0" aria-controls="quoteTable" href="#"><span>Add Description</span></a>')
                    $('.dt-button').addClass('btn btn-primary').removeClass('dt-button').css('margin-right', '5px')
                    $('.buttons-copy').css('display', 'none');
                    $('.buttons-excel').css('display', 'none');
                    $('.buttons-csv').css('display', 'none');
                    $('.buttons-pdf').css('display', 'none');
                    quotedescTable.row('.remove').remove().draw(false);


                    function removeDataFromDT(btn) {

                        $(btn.closest('tr')).addClass('remove')
                        quotedescTable.row('.remove').remove().draw(false);
                        calcAmount();
                    }

                    function OnDiscountEntry(val)
                    {
                        calcAmount();
                    }

                    function calcAmount() {
                        var amt = 0;
                        var disc = $('#Discount').val();
                        var gst = parseInt($('#GTAX').val());
                    quotedescTable.rows().every(function (rowIdx, tableLoop, rowLoop) {
                        var data = this.data();

                        var object = { QuoteDescription: data[0], Quantity: parseInt(data[1]), UnitOfMeasure: data[2], QuotePrice: parseFloat(data[3]) }
                        //contacts.push(object);
                        amt = amt + data[1] * data[3];

                    });
                    amt = amt - disc;
                    if (gst == 0)
                    {
                        amt = amt + amt * 7 / 100;
                    }

                    $('#QuoteValue').val(amt);
                    $('#FinalAmount').val(amt.toFixed(2));

                    }

                   

                    @*$(document).ready(function () {

                        $("#QuoteDate").datepicker({
                            dateFormat: "@Eng360Web.Models.Utility.AppSettings.GetDateFormat()"
                        });
                    });

                    $(document).ready(function () {

                        $("#ValidTill").datepicker({
                            dateFormat: "@Eng360Web.Models.Utility.AppSettings.GetDateFormat()"
                        });
                    });*@

                    function onclientChange(selectedObject) {
                        var myflag = false;
                      
                        $("#Attention_CCID > option").each(function () {
                            $('option#' + this.value).removeAttr("selected");
                        });

                        $("#Attention_CCID > option").each(function () {
                            if ($(this).hasClass(selectedObject.value)) {


                                $(this).show();

                                if (myflag == false) {

                                    $('option#' + this.value).attr("selected", "true");

                                    // $("#Attention_CCID > [value=" + this.value + "]").attr("selected", "true");
                                    // $('#Attention_CCID option[value=' + this.value + ']').attr('selected', 'true');
                                    // $('#Attention_CCID option[value=' + this.value + ']').prop('selected', 'true');

                                    myflag = true;
                                }
                            }
                            else {

                                $(this).hide();
                            }
                        });
                    }

                    function setAttentionID(selectedObject)
                    {

                        $('#Attention_CCID').val(selectedObject.value)
                    }
                    $("form").removeData("validator");
                    $("form").removeData("unobtrusiveValidation");
                    $.validator.unobtrusive.parse("form");



                    $("#ClientID > option").each(function () {
                        onclientChange(this);
                        return false;
                    });






</script>
